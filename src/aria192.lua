--[[
    https://tools.ietf.org/html/rfc5794
    http://210.104.33.10/ARIA/doc/ARIA-specification-e.pdf
]]
local bit = require "bit"

local AND, OR, NOT, XOR = bit.band, bit.bor, bit.bnot, bit.bxor 
local LSHIFT, RSHIFT = bit.lshift, bit.rshift

local ROL, ROR = bit.rol, bit.ror

local tohex, tobit = bit.tohex, bit.tobit

local qword = require "luasec.src.qword"
local oword = require "luasec.src.oword"

local function gadd(a, ...)
    return AND(XOR(a, ...), 0xff)
end  

local function splitWord(w)
    local a = RSHIFT(AND(w, 0xff000000), 24)
    local b = RSHIFT(AND(w, 0xff0000), 16)
    local c = RSHIFT(AND(w, 0xff00), 8)
    local d = AND(w, 0xff)
    return a, b, c, d
end 

local function mergeBytes(a, b, c, d)
    a = LSHIFT(a, 24)
    b = LSHIFT(b, 16)
    c = LSHIFT(c, 8)
    return OR(a, b, c, d)
end

local function mergeOword(a, b, c, d)
    return oword(qword(a, b), qword(c, d))
end


--[[
    CK1, CK2, and CK3 are 128-bit
   constants, taking one of the following values.

   C1 =  0x517cc1b727220a94fe13abe8fa9a6ee0
   C2 =  0x6db14acc9e21c820ff28b1d5ef5de2b0
   C3 =  0xdb92371d2126e9700324977504e8c90e

   These values are obtained from the first 128*3 bits of the fractional
   part of 1/PI, where PI is the circle ratio.
]]

local CK1 = oword(qword(0x6db14acc, 0x9e21c820), qword(0xff28b1d5, 0xef5de2b0))
local CK2 = oword(qword(0xdb92371d, 0x2126e970), qword(0x03249775, 0x04e8c90e))
local CK3 = oword(qword(0x517cc1b7, 0x27220a94), qword(0xfe13abe8, 0xfa9a6ee0))

--[[

]]
local SB1 = {
[0]=0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
}
local SB2 = {
[0]=0xE2, 0x4E, 0x54, 0xFC, 0x94, 0xC2, 0x4A, 0xCC, 0x62, 0x0D, 0x6A, 0x46, 0x3C, 0x4D, 0x8B, 0xD1,
    0x5E, 0xFA, 0x64, 0xCB, 0xB4, 0x97, 0xBE, 0x2B, 0xBC, 0x77, 0x2E, 0x03, 0xD3, 0x19, 0x59, 0xC1,
    0x1D, 0x06, 0x41, 0x6B, 0x55, 0xF0, 0x99, 0x69, 0xEA, 0x9C, 0x18, 0xAE, 0x63, 0xDF, 0xE7, 0xBB,
    0x00, 0x73, 0x66, 0xFB, 0x96, 0x4C, 0x85, 0xE4, 0x3A, 0x09, 0x45, 0xAA, 0x0F, 0xEE, 0x10, 0xEB,
    0x2D, 0x7F, 0xF4, 0x29, 0xAC, 0xCF, 0xAD, 0x91, 0x8D, 0x78, 0xC8, 0x95, 0xF9, 0x2F, 0xCE, 0xCD,
    0x08, 0x7A, 0x88, 0x38, 0x5C, 0x83, 0x2A, 0x28, 0x47, 0xDB, 0xB8, 0xC7, 0x93, 0xA4, 0x12, 0x53,
    0xFF, 0x87, 0x0E, 0x31, 0x36, 0x21, 0x58, 0x48, 0x01, 0x8E, 0x37, 0x74, 0x32, 0xCA, 0xE9, 0xB1,
    0xB7, 0xAB, 0x0C, 0xD7, 0xC4, 0x56, 0x42, 0x26, 0x07, 0x98, 0x60, 0xD9, 0xB6, 0xB9, 0x11, 0x40,
    0xEC, 0x20, 0x8C, 0xBD, 0xA0, 0xC9, 0x84, 0x04, 0x49, 0x23, 0xF1, 0x4F, 0x50, 0x1F, 0x13, 0xDC,
    0xD8, 0xC0, 0x9E, 0x57, 0xE3, 0xC3, 0x7B, 0x65, 0x3B, 0x02, 0x8F, 0x3E, 0xE8, 0x25, 0x92, 0xE5,
    0x15, 0xDD, 0xFD, 0x17, 0xA9, 0xBF, 0xD4, 0x9A, 0x7E, 0xC5, 0x39, 0x67, 0xFE, 0x76, 0x9D, 0x43,
    0xA7, 0xE1, 0xD0, 0xF5, 0x68, 0xF2, 0x1B, 0x34, 0x70, 0x05, 0xA3, 0x8A, 0xD5, 0x79, 0x86, 0xA8,
    0x30, 0xC6, 0x51, 0x4B, 0x1E, 0xA6, 0x27, 0xF6, 0x35, 0xD2, 0x6E, 0x24, 0x16, 0x82, 0x5F, 0xDA,
    0xE6, 0x75, 0xA2, 0xEF, 0x2C, 0xB2, 0x1C, 0x9F, 0x5D, 0x6F, 0x80, 0x0A, 0x72, 0x44, 0x9B, 0x6C,
    0x90, 0x0B, 0x5B, 0x33, 0x7D, 0x5A, 0x52, 0xF3, 0x61, 0xA1, 0xF7, 0xB0, 0xD6, 0x3F, 0x7C, 0x6D,
    0xED, 0x14, 0xE0, 0xA5, 0x3D, 0x22, 0xB3, 0xF8, 0x89, 0xDE, 0x71, 0x1A, 0xAF, 0xBA, 0xB5, 0x81
}
local SB3 = {
[0]=0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
}
local SB4 = {
[0]=0x30, 0x68, 0x99, 0x1B, 0x87, 0xB9, 0x21, 0x78, 0x50, 0x39, 0xDB, 0xE1, 0x72, 0x09, 0x62, 0x3C,
    0x3E, 0x7E, 0x5E, 0x8E, 0xF1, 0xA0, 0xCC, 0xA3, 0x2A, 0x1D, 0xFB, 0xB6, 0xD6, 0x20, 0xC4, 0x8D,
    0x81, 0x65, 0xF5, 0x89, 0xCB, 0x9D, 0x77, 0xC6, 0x57, 0x43, 0x56, 0x17, 0xD4, 0x40, 0x1A, 0x4D,
    0xC0, 0x63, 0x6C, 0xE3, 0xB7, 0xC8, 0x64, 0x6A, 0x53, 0xAA, 0x38, 0x98, 0x0C, 0xF4, 0x9B, 0xED,
    0x7F, 0x22, 0x76, 0xAF, 0xDD, 0x3A, 0x0B, 0x58, 0x67, 0x88, 0x06, 0xC3, 0x35, 0x0D, 0x01, 0x8B,
    0x8C, 0xC2, 0xE6, 0x5F, 0x02, 0x24, 0x75, 0x93, 0x66, 0x1E, 0xE5, 0xE2, 0x54, 0xD8, 0x10, 0xCE,
    0x7A, 0xE8, 0x08, 0x2C, 0x12, 0x97, 0x32, 0xAB, 0xB4, 0x27, 0x0A, 0x23, 0xDF, 0xEF, 0xCA, 0xD9,
    0xB8, 0xFA, 0xDC, 0x31, 0x6B, 0xD1, 0xAD, 0x19, 0x49, 0xBD, 0x51, 0x96, 0xEE, 0xE4, 0xA8, 0x41,
    0xDA, 0xFF, 0xCD, 0x55, 0x86, 0x36, 0xBE, 0x61, 0x52, 0xF8, 0xBB, 0x0E, 0x82, 0x48, 0x69, 0x9A,
    0xE0, 0x47, 0x9E, 0x5C, 0x04, 0x4B, 0x34, 0x15, 0x79, 0x26, 0xA7, 0xDE, 0x29, 0xAE, 0x92, 0xD7,
    0x84, 0xE9, 0xD2, 0xBA, 0x5D, 0xF3, 0xC5, 0xB0, 0xBF, 0xA4, 0x3B, 0x71, 0x44, 0x46, 0x2B, 0xFC,
    0xEB, 0x6F, 0xD5, 0xF6, 0x14, 0xFE, 0x7C, 0x70, 0x5A, 0x7D, 0xFD, 0x2F, 0x18, 0x83, 0x16, 0xA5,
    0x91, 0x1F, 0x05, 0x95, 0x74, 0xA9, 0xC1, 0x5B, 0x4A, 0x85, 0x6D, 0x13, 0x07, 0x4F, 0x4E, 0x45,
    0xB2, 0x0F, 0xC9, 0x1C, 0xA6, 0xBC, 0xEC, 0x73, 0x90, 0x7B, 0xCF, 0x59, 0x8F, 0xA1, 0xF9, 0x2D,
    0xF2, 0xB1, 0x00, 0x94, 0x37, 0x9F, 0xD0, 0x2E, 0x9C, 0x6E, 0x28, 0x3F, 0x80, 0xF0, 0x3D, 0xD3,
    0x25, 0x8A, 0xB5, 0xE7, 0x42, 0xB3, 0xC7, 0xEA, 0xF7, 0x4C, 0x11, 0x33, 0x03, 0xA2, 0xAC, 0x60
}

--[[
    Type 1 substitution layer SL1 is an algorithm that takes a 16-byte
    string x0 || x1 ||...|| x15 as input and outputs a 16-byte string
    y0 || y1 ||...|| y15 as follows.

    y0 = SB1(x0),  y1 = SB2(x1),  y2 = SB3(x2),  y3 = SB4(x3),
    y4 = SB1(x4),  y5 = SB2(x5),  y6 = SB3(x6),  y7 = SB4(x7),
    y8 = SB1(x8),  y9 = SB2(x9),  y10= SB3(x10), y11= SB4(x11),
    y12= SB1(x12), y13= SB2(x13), y14= SB3(x14), y15= SB4(x15).
]]
local function hex(x)
    return (x < 16 and "0" or "")..string.format("%x", x)
end 
local function subWord1(a)
    local x0, x1, x2, x3 = splitWord(a)
    return SB1[x0], SB2[x1], SB3[x2], SB4[x3]
end

local function SL1(x)
    local aa, ab, ba, bb = x:split()

    aa = mergeBytes(subWord1(aa))
    ab = mergeBytes(subWord1(ab))
    ba = mergeBytes(subWord1(ba))
    bb = mergeBytes(subWord1(bb))

    return mergeOword(aa, ab, ba, bb)
end 
--[[
    
   Type 2 substitution layer SL2 is an algorithm that takes a 16-byte
   string x0 || x1 ||...|| x15 as input and outputs a 16-byte string
   y0 || y1 ||...|| y15 as follows.

   y0 = SB3(x0),  y1 = SB4(x1),  y2 = SB1(x2),  y3 = SB2(x3),
   y4 = SB3(x4),  y5 = SB4(x5),  y6 = SB1(x6),  y7 = SB2(x7),
   y8 = SB3(x8),  y9 = SB4(x9),  y10= SB1(x10), y11= SB2(x11),
   y12= SB3(x12), y13= SB4(x13), y14= SB1(x14), y15= SB2(x15).

]]
local function subWord2(a)
    local x0, x1, x2, x3 = splitWord(a)
    return SB3[x0], SB4[x1], SB1[x2], SB2[x3]
end

local function SL2(x)
    local aa, ab, ba, bb = x:split()

    aa = mergeBytes(subWord2(aa))
    ab = mergeBytes(subWord2(ab))
    ba = mergeBytes(subWord2(ba))
    bb = mergeBytes(subWord2(bb))

    return mergeOword(aa, ab, ba, bb)
end 
--[[
    Diffusion layer A is an algorithm that takes a 16-byte string x0 ||
   x1 || ... || x15 as input and outputs a 16-byte string
   y0 || y1 ||...|| y15 by the following equations.
]]
local function A(x)
    local aa, ab, ba, bb = x:split()
    local x0, x1, x2, x3 = splitWord(aa)
    local x4, x5, x6, x7 = splitWord(ab)
    local x8, x9, xA, xB = splitWord(ba)
    local xC, xD, xE, xF = splitWord(bb)

    local y0 = gadd(x3, x4, x6, x8, x9, xD, xE)
    local y1 = gadd(x2, x5, x7, x8, x9, xC, xF)
    local y2 = gadd(x1, x4, x6, xA, xB, xC, xF)
    local y3 = gadd(x0, x5, x7, xA, xB, xD, xE)
    local y4 = gadd(x0, x2, x5, x8, xB, xE, xF)
    local y5 = gadd(x1, x3, x4, x9, xA, xE, xF)
    local y6 = gadd(x0, x2, x7, x9, xA, xC, xD)
    local y7 = gadd(x1, x3, x6, x8, xB, xC, xD)
    local y8 = gadd(x0, x1, x4, x7, xA, xD, xF)
    local y9 = gadd(x0, x1, x5, x6, xB, xC, xE)
    local yA = gadd(x2, x3, x5, x6, x8, xD, xF)
    local yB = gadd(x2, x3, x4, x7, x9, xC, xE)
    local yC = gadd(x1, x2, x6, x7, x9, xB, xC)
    local yD = gadd(x0, x3, x6, x7, x8, xA, xD)
    local yE = gadd(x0, x3, x4, x5, x9, xB, xE)
    local yF = gadd(x1, x2, x4, x5, x8, xA, xF)

    aa = mergeBytes(y0, y1, y2, y3)
    ab = mergeBytes(y4, y5, y6, y7)
    ba = mergeBytes(y8, y9, yA, yB)
    bb = mergeBytes(yC, yD, yE, yF)

    return mergeOword(aa, ab, ba, bb)
end
--[[
    There are two types of round functions for ARIA.  One is called an
   odd round function and is denoted by FO.  It takes as input a pair
   (D,RK) of two 128-bit strings and outputs
]]
local function FO(D, RK)
    return A(SL1(D ^ RK))
end

local function FE(D, RK)
    return A(SL2(D ^ RK))
end


local function splitOwords(y)
    local z = {}
    for i = 1, #y do
        local x = y[i]
        local a, b = x.left, x.right -- 64-bit
        local offset = (i - 1)*4
        z[offset + 1] = a.left
        z[offset + 2] = a.right 
        z[offset + 3] = b.left 
        z[offset + 4] = b.right
    end 
    return z
end

local function mergeOwords(z)
    local y = {}
    for i = 1, #z/4 do
        local offset = (i - 1)*4
        y[i] = oword(
            qword(
                z[offset + 1],
                z[offset + 2]
            ),
            qword(
                z[offset + 3],
                z[offset + 4]
            )
        )
    end
    return y
end 
local function schedule(k1, k2)
    --[[
        Let K denote a master key of 128, 192, or 256 bits.  Given the master
        key K, we first define 128-bit values KL and KR as follows.

        KL || KR = K || 0 ... 0,

        where the number of zeros is 128, 64, or 0, depending on the size of
        K.  That is, KL is set to the leftmost 128 bits of K and KR is set to
        the remaining bits of K (if any), right-padded with zeros to a
        128-bit value.
    ]]
    local KL, KR = k1, oword(k2, qword(0, 0))
    --[[
        Then, we define four 128-bit values (W0, W1, W2, and
        W3) as the intermediate round values appearing in the encryption of
        KL || KR by a 3-round, 256-bit Feistel cipher.
    ]]
    local W0 = KL
    local W1 = FO(W0, CK1) ^ KR
    local W2 = FE(W1, CK2) ^ W0
    local W3 = FO(W2, CK3) ^ W1
    --[[
        Once W0, W1, W2, and W3 are determined, we compute encryption round
        keys ek1, ..., ek17 as follows.
    ]]

    local ek = {
        W0 ^ (W1:ror(19)),
        W1 ^ (W2:ror(19)),
        W2 ^ (W3:ror(19)),
        W0:ror(19) ^ W3,
        W0 ^ (W1:ror(31)),
        W1 ^ (W2:ror(31)),
        W2 ^ (W3:ror(31)),
        W0:ror(31) ^ W3,
        W0 ^ (W1:rol(61)),
        W1 ^ (W2:rol(61)),
        W2 ^ (W3:rol(61)),
        W0:rol(61) ^ W3,
        W0 ^ (W1:rol(31)),
        W1 ^ (W2:rol(31)),
        W2 ^ (W3:rol(31)),
        --W0:rol(31) ^ W3,
        --W0 ^ (W1:rol(19))
    }
    local dk = {}
    dk[1] = ek[15]
    for i = 2, 14 do 
        dk[i] = A(ek[16 - i])
    end
    dk[15] = ek[1]
    -- split all of the keys to integers
    local eks = splitOwords(ek)
    local dks = splitOwords(dk)
    return {
        ek = eks, dk = dks
    }
end

local function randomize(p, k)
    for i = 1, 13 do
        p = (i % 2 == 0) and FE(p, k[i]) or FO(p, k[i])
    end
    p = SL2(p ^ k[14])
    p = p ^ k[15]
    return p
end 

local m = {}
m.__index = m 
m.new = function (a, b, c, d, e, f)
    local new = schedule(mergeOword(a, b, c, d), qword(e, f))
    setmetatable(new, m)
    return new 
end

m.encrypt = function (k, a, b, c, d)
    return randomize(mergeOword(a, b, c, d), mergeOwords(k.ek)):split()
end

m.decrypt = function (k, a, b, c, d)
    return randomize(mergeOword(a, b, c, d), mergeOwords(k.dk)):split()
end

return m

